<launch>
   <!-- Static Transforms: Setting Up the Relationships Between Coordinate Frames -->
   <!--<node pkg="tf" type="static_transform_publisher" name="odom_broadcaster" args="0 0 0 0 0 0 odom base_footprint 30" /> -->
   <!--<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0 0 0 0 base_footprint base_link 30" />-->
   <!--<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0 0 0 0 0 0 base_link laser 30" />-->
   <!--<node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />-->
   <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0 0.06 0.02 0 0 0 base_link imu 30" />
   <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
   <include file="$(find rplidar_ros)/launch/rplidar.launch" />
    
    <!--imu here-->
    
    
   <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino --> 
   <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->    
   <!-- Subscribe: /cmd_vel -->
   <!-- Publish: /right_ticks, /left_ticks -->
   <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
      <param name="port" value="/dev/ttyUSB0"/>
      <param name="baud" value="57600"/>
   </node>

   <!-- ROBOT descriptions -->
   <include file="$(find launch_jetson_nano_bot)/launch/my_bot_description.launch"/>
   
   <!-- Wheel Odometry Publisher -->
   <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
   <!-- Publish: /odom -->
   <node pkg="localization_data_pub" type="ekf_odom_pub" name="ekf_odom_pub" output="screen">
      <param name="publish_rate" value="10.0"/>
      <param name="publish_tf" value="true"/>
      <param name="linear_scale_positive" value="1.0"/>
      <param name="linear_scale_negative" value="1.0"/>
      <param name="angular_scale_positive" value="1.0"/>
      <param name="angular_scale_negative" value="1.0"/>
   </node>

   <!-- Extended Kalman Filter from robot_pose_ekf Node -->
   <!-- Subscribe: /odom -->
   <!-- Publish: /robot_pose_ekf/odom_combined -->
   <remap from="odom" to="odom_data_quat"/>
   <remap from="imu_data" to="imu/data" />
   <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
       <param name="output_frame" value="odom_combined"/>
       <param name="base_footprint_frame" value="base_footprint"/>
       <param name="freq" value="50.0"/>
       <param name="sensor_timeout" value="1.0"/>
       <param name="odom_used" value="true"/>
       <param name="imu_used" value="false"/>
       <param name="vo_used" value="false"/>
       <param name="gps_used" value="false"/>
       <param name="debug" value="false"/>
       <param name="self_diagnose" value="false"/>
   </node>
    
   <!-- Initial Pose and Goal Publisher -->
   <!-- Publish: /initialpose, /move_base_simple/goal -->
   <node pkg="rviz" type="rviz" name="rviz" args="-d $(find navstack_pub)/launch/rviz_saved.rviz">
   </node>

   <!-- Subscribe: /initialpose, /move_base_simple/goal -->
   <!-- Publish: /initial_2d, /goal_2d -->
   <node pkg="localization_data_pub" type="rviz_click_to_2d" name="rviz_click_to_2d">
   </node>
   
   <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
   <!-- Used for obstacle avoidance and can be used for mapping --> 
   <!-- Publish: /scan -->

   <!-- Khởi động máy chủ bản đồ để cung cấp bản đồ có sẵn -->
   <node name="map_server" pkg="map_server" type="map_server" args="$(find your_package)/maps/your_map.yaml" />
   
   <!-- Khởi động Cartographer chỉ để định vị -->
   <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="$(find your_package)/config/localization.lua" />
   
   <!-- Cung cấp các phép biến đổi cần thiết -->
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
   <node name="tf_static_broadcaster" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 /map /odom 100" />

   <!-- Add AMCL example for differential drive robots for Localization -->
   <!-- Subscribe: /scan, /tf, /initialpose, /map -->
   <!-- Publish: /amcl_pose, /particlecloud, /tf -->
   <node pkg="amcl" type="amcl" name="amcl" output="screen">
      <param name="use_map_topic" value="true"/>
      <param name="odom_frame_id" value="odom"/>
      <param name="base_frame_id" value="base_link"/>
      <param name="global_frame_id" value="map"/>
      <param name="scan_topic" value="scan"/>
      <param name="transform_tolerance" value="0.5"/>
   </node>

   <!-- Move Base Node -->
   <!-- Subscribe: /move_base_simple/goal -->
   <!-- Publish: /cmd_vel -->
   <arg name="base_global_planner" default="navfn/NavfnROS"/>
   <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> 
   <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
      <param name="base_global_planner" value="$(arg base_global_planner)"/> 
      <param name="base_local_planner" value="$(arg base_local_planner)"/>  
      <rosparam file="$(find navstack_pub)/param/planner.yaml" command="load"/>
      <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap"/>
      <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap"/>
      <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load"/>
      <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load"/> 
      <param name="controller_frequency" value="10.0"/>
      <param name="planner_frequency" value="1.0"/>
      <param name="recovery_behavior_enabled" value="true"/>
      <rosparam param="/move_base/controller/debug" value="true"/>
   </node> 
</launch>
